grammar ColdFront

  rule statement
    location data_description {
      def run(engine=Engine.new)
        location.run(engine)
        data_description.run(engine)
        engine
      end
    }
  end
  
  rule location
    '(' loc_str:(latlon / address) ')' {
      def run(engine)
        loc_str.run(engine)
      end
    }
  end
  
  rule data_description
    datatype datetime {
      def run(engine)
        datatype.run(engine)
        datetime.run(engine)
      end
    }
    /
    datetime datatype {
      def run(engine)
        datetime.run(engine)
        datatype.run(engine)        
      end
    }    
  end
  
  rule latlon
    latitude:coordinate ',' ' '* longitude:coordinate {
      def run(engine)
        engine.location_data = text_value
      end
    }
  end
  
  rule address
    '{' addr:[a-zA-Z0-9 ,]+ '}' {
      def run(engine)
        engine.location_data = addr.text_value
      end
    }
  end
  
  rule coordinate
    '-'? [0-9] 1..3 ('.' [0-9]+)?
  end

  rule datetime
    '@{' date time_str:(' '+ time)? '}' {
      def run(engine)
      	engine.set_datetime(date.text_value, time_str.text_value)
      end
    }
  end

  rule date
	  [0-9] [0-9] [0-9] [0-9] '.' [0-1] [0-2] '.' [0-3] [0-9]
  end
	
  rule time
	  [0-2] [0-9] ':' [0-5] [0-9]
  end
	  
  rule datatype
    '^' datatype_keyword:[a-zA-Z]+ {
      def run(engine)
        engine.datatype = datatype_keyword.text_value
      end      
    }
  end

end