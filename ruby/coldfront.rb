# Autogenerated from a Treetop grammar. Edits may be lost.


module ColdFront
  include Treetop::Runtime

  def root
    @root ||= :statement
  end

  module Statement0
    def location
      elements[0]
    end

    def data_description
      elements[1]
    end
  end

  module Statement1
    def run(engine=Engine.new)
      location.run(engine)
      data_description.run(engine)
      engine
    end
  end

  def _nt_statement
    start_index = index
    if node_cache[:statement].has_key?(index)
      cached = node_cache[:statement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_location
    s0 << r1
    if r1
      r2 = _nt_data_description
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Statement0)
      r0.extend(Statement1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:statement][start_index] = r0

    r0
  end

  module Location0
    def loc_str
      elements[1]
    end

  end

  module Location1
    def run(engine)
      loc_str.run(engine)
    end
  end

  def _nt_location
    start_index = index
    if node_cache[:location].has_key?(index)
      cached = node_cache[:location][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('(', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('(')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      r3 = _nt_latlon
      if r3
        r2 = r3
      else
        r4 = _nt_address
        if r4
          r2 = r4
        else
          @index = i2
          r2 = nil
        end
      end
      s0 << r2
      if r2
        if has_terminal?(')', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(')')
          r5 = nil
        end
        s0 << r5
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Location0)
      r0.extend(Location1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:location][start_index] = r0

    r0
  end

  module DataDescription0
    def datatype
      elements[0]
    end

    def datetime
      elements[1]
    end
  end

  module DataDescription1
    def run(engine)
      datatype.run(engine)
      datetime.run(engine)
    end
  end

  module DataDescription2
    def datetime
      elements[0]
    end

    def datatype
      elements[1]
    end
  end

  module DataDescription3
    def run(engine)
      datetime.run(engine)
      datatype.run(engine)        
    end
  end

  def _nt_data_description
    start_index = index
    if node_cache[:data_description].has_key?(index)
      cached = node_cache[:data_description][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_datatype
    s1 << r2
    if r2
      r3 = _nt_datetime
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(DataDescription0)
      r1.extend(DataDescription1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i4, s4 = index, []
      r5 = _nt_datetime
      s4 << r5
      if r5
        r6 = _nt_datatype
        s4 << r6
      end
      if s4.last
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        r4.extend(DataDescription2)
        r4.extend(DataDescription3)
      else
        @index = i4
        r4 = nil
      end
      if r4
        r0 = r4
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:data_description][start_index] = r0

    r0
  end

  module Latlon0
    def latitude
      elements[0]
    end

    def longitude
      elements[3]
    end
  end

  module Latlon1
    def run(engine)
      engine.location_data = text_value
    end
  end

  def _nt_latlon
    start_index = index
    if node_cache[:latlon].has_key?(index)
      cached = node_cache[:latlon][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_coordinate
    s0 << r1
    if r1
      if has_terminal?(',', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(',')
        r2 = nil
      end
      s0 << r2
      if r2
        s3, i3 = [], index
        loop do
          if has_terminal?(' ', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(' ')
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        s0 << r3
        if r3
          r5 = _nt_coordinate
          s0 << r5
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Latlon0)
      r0.extend(Latlon1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:latlon][start_index] = r0

    r0
  end

  module Address0
    def addr
      elements[1]
    end

  end

  module Address1
    def run(engine)
      engine.location_data = addr.text_value
    end
  end

  def _nt_address
    start_index = index
    if node_cache[:address].has_key?(index)
      cached = node_cache[:address][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('{', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('{')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[a-zA-Z0-9 ,]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        if has_terminal?('}', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('}')
          r4 = nil
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Address0)
      r0.extend(Address1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:address][start_index] = r0

    r0
  end

  module Coordinate0
  end

  module Coordinate1
  end

  def _nt_coordinate
    start_index = index
    if node_cache[:coordinate].has_key?(index)
      cached = node_cache[:coordinate][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('-', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('-')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        if has_terminal?('\G[0-9]', true, index)
          r4 = true
          @index += 1
        else
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
        if s3.size == 3
          break
        end
      end
      if s3.size < 1
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s0 << r3
      if r3
        i6, s6 = index, []
        if has_terminal?('.', false, index)
          r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('.')
          r7 = nil
        end
        s6 << r7
        if r7
          s8, i8 = [], index
          loop do
            if has_terminal?('\G[0-9]', true, index)
              r9 = true
              @index += 1
            else
              r9 = nil
            end
            if r9
              s8 << r9
            else
              break
            end
          end
          if s8.empty?
            @index = i8
            r8 = nil
          else
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
          end
          s6 << r8
        end
        if s6.last
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          r6.extend(Coordinate0)
        else
          @index = i6
          r6 = nil
        end
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r5
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Coordinate1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:coordinate][start_index] = r0

    r0
  end

  module Datetime0
    def time
      elements[1]
    end
  end

  module Datetime1
    def date
      elements[1]
    end

    def time_str
      elements[2]
    end

  end

  module Datetime2
    def run(engine)
    	engine.set_datetime(date.text_value, time_str.text_value)
    end
  end

  def _nt_datetime
    start_index = index
    if node_cache[:datetime].has_key?(index)
      cached = node_cache[:datetime][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('@{', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('@{')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_date
      s0 << r2
      if r2
        i4, s4 = index, []
        s5, i5 = [], index
        loop do
          if has_terminal?(' ', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(' ')
            r6 = nil
          end
          if r6
            s5 << r6
          else
            break
          end
        end
        if s5.empty?
          @index = i5
          r5 = nil
        else
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        end
        s4 << r5
        if r5
          r7 = _nt_time
          s4 << r7
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(Datetime0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
        if r3
          if has_terminal?('}', false, index)
            r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('}')
            r8 = nil
          end
          s0 << r8
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Datetime1)
      r0.extend(Datetime2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:datetime][start_index] = r0

    r0
  end

  module Date0
  end

  def _nt_date
    start_index = index
    if node_cache[:date].has_key?(index)
      cached = node_cache[:date][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[0-9]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('\G[0-9]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      s0 << r2
      if r2
        if has_terminal?('\G[0-9]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        s0 << r3
        if r3
          if has_terminal?('\G[0-9]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          s0 << r4
          if r4
            if has_terminal?('.', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('.')
              r5 = nil
            end
            s0 << r5
            if r5
              if has_terminal?('\G[0-1]', true, index)
                r6 = true
                @index += 1
              else
                r6 = nil
              end
              s0 << r6
              if r6
                if has_terminal?('\G[0-2]', true, index)
                  r7 = true
                  @index += 1
                else
                  r7 = nil
                end
                s0 << r7
                if r7
                  if has_terminal?('.', false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure('.')
                    r8 = nil
                  end
                  s0 << r8
                  if r8
                    if has_terminal?('\G[0-3]', true, index)
                      r9 = true
                      @index += 1
                    else
                      r9 = nil
                    end
                    s0 << r9
                    if r9
                      if has_terminal?('\G[0-9]', true, index)
                        r10 = true
                        @index += 1
                      else
                        r10 = nil
                      end
                      s0 << r10
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Date0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:date][start_index] = r0

    r0
  end

  module Time0
  end

  def _nt_time
    start_index = index
    if node_cache[:time].has_key?(index)
      cached = node_cache[:time][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[0-2]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('\G[0-9]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      s0 << r2
      if r2
        if has_terminal?(':', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(':')
          r3 = nil
        end
        s0 << r3
        if r3
          if has_terminal?('\G[0-5]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          s0 << r4
          if r4
            if has_terminal?('\G[0-9]', true, index)
              r5 = true
              @index += 1
            else
              r5 = nil
            end
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Time0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:time][start_index] = r0

    r0
  end

  module Datatype0
    def datatype_keyword
      elements[1]
    end
  end

  module Datatype1
    def run(engine)
      engine.datatype = datatype_keyword.text_value
    end
  end

  def _nt_datatype
    start_index = index
    if node_cache[:datatype].has_key?(index)
      cached = node_cache[:datatype][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('^', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('^')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[a-zA-Z]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Datatype0)
      r0.extend(Datatype1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:datatype][start_index] = r0

    r0
  end

end

class ColdFrontParser < Treetop::Runtime::CompiledParser
  include ColdFront
end
